"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[487],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=m(n),h=o,d=c["".concat(l,".").concat(h)]||c[h]||p[h]||i;return n?a.createElement(d,r(r({ref:t},u),{},{components:n})):a.createElement(d,r({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var m=2;m<i;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3612:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(7294),o=n(6010),i=n(5281),r=n(5999);const s={admonition:"admonition_LlT9",admonitionHeading:"admonitionHeading_tbUL",admonitionIcon:"admonitionIcon_kALy",admonitionContent:"admonitionContent_S0QG"};var l=n(5108);const m={note:{infimaClassName:"secondary",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:a.createElement(r.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:a.createElement(r.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:a.createElement(r.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:a.createElement(r.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 16 16"},a.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:a.createElement(r.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")}},u={secondary:"note",important:"info",success:"tip",warning:"danger"};function c(e){const{mdxAdmonitionTitle:t,rest:n}=function(e){const t=a.Children.toArray(e),n=t.find((e=>a.isValidElement(e)&&"mdxAdmonitionTitle"===e.props?.mdxType)),o=a.createElement(a.Fragment,null,t.filter((e=>e!==n)));return{mdxAdmonitionTitle:n,rest:o}}(e.children);return{...e,title:e.title??t,children:n}}function p(e){const{children:t,type:n,title:r,icon:p}=c(e),h=function(e){const t=u[e]??e,n=m[t];return n||(l.warn(`No admonition config found for admonition type "${t}". Using Info as fallback.`),m.info)}(n),d=r??h.label,{iconComponent:f}=h,k=p??a.createElement(f,null);return a.createElement("div",{className:(0,o.Z)(i.k.common.admonition,i.k.common.admonitionType(e.type),"alert",`alert--${h.infimaClassName}`,s.admonition)},a.createElement("div",{className:s.admonitionHeading},a.createElement("span",{className:s.admonitionIcon},k),d),a.createElement("div",{className:s.admonitionContent},t))}},3414:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),o=n(941),i=n(4996);const r=e=>{let{alt:t,sources:n}=e;const[r,s]=(0,a.useState)(!1),l=e=>{"Escape"===e.key&&s(!1)};return(0,a.useEffect)((()=>(r?document.addEventListener("keydown",l):document.removeEventListener("keydown",l),()=>{document.removeEventListener("keydown",l)})),[r]),a.createElement("div",{className:"zoomable-image "+(r?"fullscreen":""),onClick:()=>{s(!r)}},a.createElement(o.Z,{className:"zoomable-image-inner",alt:t,sources:{light:(0,i.Z)(n.light),dark:(0,i.Z)(n.dark)}}))}},7307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),o=(n(7294),n(3905)),i=(n(941),n(4996),n(3414),n(3612));const r={},s="Chains",l={unversionedId:"components/chains",id:"components/chains",title:"Chains",description:"We appreciate your understanding as we polish our documentation \u2013 it may contain some rough edges. Share your feedback or report issues to help us improve! \ud83d\udee0\ufe0f\ud83d\udcdd",source:"@site/docs/components/chains.mdx",sourceDirName:"components",slug:"/components/chains",permalink:"/components/chains",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Agents",permalink:"/components/agents"},next:{title:"Embeddings",permalink:"/components/embeddings"}},m={},u=[{value:"CombineDocsChain",id:"combinedocschain",level:3},{value:"ConversationChain",id:"conversationchain",level:3},{value:"ConversationalRetrievalChain",id:"conversationalretrievalchain",level:3},{value:"LLMChain",id:"llmchain",level:3},{value:"LLMMathChain",id:"llmmathchain",level:3},{value:"RetrievalQA",id:"retrievalqa",level:3},{value:"SQLDatabaseChain",id:"sqldatabasechain",level:3}],c={toc:u},p="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"chains"},"Chains"),(0,o.kt)(i.Z,{type:"caution",icon:"\ud83d\udea7",title:"ZONE UNDER CONSTRUCTION",mdxType:"Admonition"},(0,o.kt)("p",null,"We appreciate your understanding as we polish our documentation \u2013 it may contain some rough edges. Share your feedback or report issues to help us improve! \ud83d\udee0\ufe0f\ud83d\udcdd")),(0,o.kt)("p",null,"Chains, in the context of language models, refer to a series of calls made to a language model. It allows for the output of one call to be used as the input for another call. Different types of chains allow for different levels of complexity. Chains are useful for creating pipelines and executing specific scenarios."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"combinedocschain"},"CombineDocsChain"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"CombineDocsChain")," incorporates methods to combine or aggregate loaded documents for question-answering functionality."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Works as a proxy of LangChain\u2019s ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/"},"documents")," chains generated by the ",(0,o.kt)("inlineCode",{parentName:"p"},"load_qa_chain")," function.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Params")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"LLM:")," Language Model to use in the chain.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"chain_type:")," The chain type to be used. Each one of them applies a different \u201ccombination strategy\u201d."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"stuff"),": The stuff ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/stuff"},"documents"),' chain (\u201cstuff" as in "to stuff" or "to fill") is the most straightforward of ',(0,o.kt)("em",{parentName:"p"},"the")," document chains. It takes a list of documents, inserts them all into a prompt, and passes that prompt to an LLM. This chain is well-suited for applications where documents are small and only a few are passed in for most calls.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"map_reduce"),": The map-reduce ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/map_reduce"},"documents")," chain first applies an LLM chain to each document individually (the Map step), treating the chain output as a new document. It then passes all the new documents to a separate combined documents chain to get a single output (the Reduce step). It can optionally first compress or collapse the mapped documents to make sure that they fit in the combined documents chain (which will often pass them to an LLM). This compression step is performed recursively if necessary.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"map_rerank"),": The map re-rank ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/map_rerank"},"documents")," chain runs an initial prompt on each document that not only tries to complete a task but also gives a score for how certain it is in its answer. The highest-scoring response is returned.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"refine"),": The refine ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/refine"},"documents")," chain constructs a response by looping over the input documents and iteratively updating its answer. For each document, it passes all non-document inputs, the current document, and the latest intermediate answer to an LLM chain to get a new answer."),(0,o.kt)("p",{parentName:"li"}," Since the Refine chain only passes a single document to the LLM at a time, it is well-suited for tasks that require analyzing more documents than can fit in the model's context. The obvious tradeoff is that this chain will make far more LLM calls than, for example, the Stuff documents chain. There are also certain tasks that are difficult to accomplish iteratively. For example, the Refine chain can perform poorly when documents frequently cross-reference one another or when a task requires detailed information from many documents."))))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"conversationchain"},"ConversationChain"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ConversationChain")," is a straightforward chain for interactive conversations with a language model, making it ideal for chatbots or virtual assistants. It allows for dynamic conversations, question-answering, and complex dialogues."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Params")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LLM:")," Language Model to use in the chain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Memory:")," Default memory store."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"input_key:")," Used to specify the key under which the user input will be stored in the conversation memory. It allows you to provide the user's input to the chain for processing and generating a response."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"output_key:")," Used to specify the key under which the generated response will be stored in the conversation memory. It allows you to retrieve the response using the specified key."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"verbose:"),"  This parameter is used to control the level of detail in the output of the chain. When set to True, it will print out some internal states of the chain while it is being run, which can be helpful for debugging and understanding the chain's behavior. If set to False, it will suppress the verbose output \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"conversationalretrievalchain"},"ConversationalRetrievalChain"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ConversationalRetrievalChain")," extracts information and provides answers by combining document search and question-answering abilities."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"A retriever is a component that finds documents based on a query. It doesn't store the documents themselves, but it returns the ones that match the query.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Params")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"LLM:")," Language Model to use in the chain.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Memory:")," Default memory store.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Retriever:")," The retriever used to fetch relevant documents.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"chain_type:")," The chain type to be used. Each one of them applies a different \u201ccombination strategy\u201d."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"stuff"),": The stuff ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/stuff"},"documents"),' chain (\u201cstuff" as in "to stuff" or "to fill") is the most straightforward of ',(0,o.kt)("em",{parentName:"p"},"the")," document chains. It takes a list of documents, inserts them all into a prompt, and passes that prompt to an LLM. This chain is well-suited for applications where documents are small and only a few are passed in for most calls.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"map_reduce"),": The map-reduce ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/map_reduce"},"documents")," chain first applies an LLM chain to each document individually (the Map step), treating the chain output as a new document. It then passes all the new documents to a separate combined documents chain to get a single output (the Reduce step). It can optionally first compress or collapse the mapped documents to make sure that they fit in the combined documents chain (which will often pass them to an LLM). This compression step is performed recursively if necessary.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"map_rerank"),": The map re-rank ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/map_rerank"},"documents")," chain runs an initial prompt on each document that not only tries to complete a task but also gives a score for how certain it is in its answer. The highest-scoring response is returned.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"refine"),": The refine ",(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/chains/document/refine"},"documents")," chain constructs a response by looping over the input documents and iteratively updating its answer. For each document, it passes all non-document inputs, the current document, and the latest intermediate answer to an LLM chain to get a new answer."),(0,o.kt)("p",{parentName:"li"}," Since the Refine chain only passes a single document to the LLM at a time, it is well-suited for tasks that require analyzing more documents than can fit in the model's context. The obvious tradeoff is that this chain will make far more LLM calls than, for example, the Stuff documents chain. There are also certain tasks that are difficult to accomplish iteratively. For example, the Refine chain can perform poorly when documents frequently cross-reference one another or when a task requires detailed information from many documents.")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"return_source_documents:")," Used to specify whether or not to include the source documents that were used to answer the question in the output. When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", source documents will be included in the output along with the generated answer. This can be useful for providing additional context or references to the user \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"verbose:")," Whether or not to run in verbose mode. In verbose mode, intermediate logs will be printed to the console \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),"."))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"llmchain"},"LLMChain"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"LLMChain")," is a straightforward chain that adds functionality around language models. It combines a prompt template with a language model. To use it, create input variables to format the prompt template. The formatted prompt is then sent to the language model, and the generated output is returned as the result of the ",(0,o.kt)("inlineCode",{parentName:"p"},"LLMChain"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Params")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LLM:")," Language Model to use in the chain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Memory:")," Default memory store."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Prompt"),": Prompt template object to use in the chain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"output_key:")," This parameter is used to specify which key in the LLM output dictionary should be returned as the final output. By default, the ",(0,o.kt)("inlineCode",{parentName:"li"},"LLMChain")," returns both the input and output key values \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"text"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"verbose:")," Whether or not to run in verbose mode. In verbose mode, intermediate logs will be printed to the console \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"llmmathchain"},"LLMMathChain"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"LLMMathChain")," combines a language model (LLM) and a math calculation component. It allows the user to input math problems and get the corresponding solutions."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"LLMMathChain")," works by using the language model with an ",(0,o.kt)("inlineCode",{parentName:"p"},"LLMChain")," to understand the input math problem and generate a math expression. It then passes this expression to the math component, which evaluates it and returns the result."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Params")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LLM:")," Language Model to use in the chain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LLMChain:")," LLM Chain to use in the chain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Memory:")," Default memory store."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"input_key:")," Used to specify the input value for the mathematical calculation. It allows you to provide the specific values or variables that you want to use in the calculation \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"question"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"output_key:")," Used to specify the key under which the output of the mathematical calculation will be stored. It allows you to retrieve the result of the calculation using the specified key \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"answer"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"verbose:")," Whether or not to run in verbose mode. In verbose mode, intermediate logs will be printed to the console \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"retrievalqa"},"RetrievalQA"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"RetrievalQA")," is a chain used to find relevant documents or information to answer a given query. The retriever is responsible for returning the relevant documents based on the query, and the QA component then extracts the answer from those documents. The retrieval QA system combines the capabilities of both the retriever and the QA component to provide accurate and relevant answers to user queries."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"A retriever is a component that finds documents based on a query. It doesn't store the documents themselves, but it returns the ones that match the query.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Params")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Combine Documents Chain:")," Chain to use to combine the documents."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Memory:")," Default memory store."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Retriever:"),"  The retriever used to fetch relevant documents."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"input_key:")," This parameter is used to specify the key in the input data that contains the question. It is used to retrieve the question from the input data and pass it to the question-answering model for generating the answer \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"query"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"output_key:")," This parameter is used to specify the key in the output data where the generated answer will be stored. It is used to retrieve the answer from the output data after the question-answering model has generated it \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"result"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"return_source_documents:")," Used to specify whether or not to include the source documents that were used to answer the question in the output. When set to ",(0,o.kt)("inlineCode",{parentName:"li"},"True"),", source documents will be included in the output along with the generated answer. This can be useful for providing additional context or references to the user \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"verbose:")," Whether or not to run in verbose mode. In verbose mode, intermediate logs will be printed to the console \u2014 defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"sqldatabasechain"},"SQLDatabaseChain"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SQLDatabaseChain")," finds answers to questions using a SQL database. It works by using the language model to understand the SQL query and generate the corresponding SQL code. It then passes the SQL code to the SQL database component, which executes the query on the database and returns the result."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Params")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Db:")," SQL Database to connect to."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LLM:")," Language Model to use in the chain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Prompt:")," Prompt template to translate natural language to SQL.")))}h.isMDXComponent=!0}}]);